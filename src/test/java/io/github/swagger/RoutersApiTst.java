/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.github.swagger;

import io.github.swagger.model.*;
import io.github.swagger.model.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-29T11:24:03.592794400-03:00[America/Sao_Paulo]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "routers", description = "Consultas de status e detalhes de processos e equipamentos.")
public interface RoutersApiTst {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /routers/status : Consulta status de equipamentos para o próximo dia
     * Retorna o status dos equipamentos planejados para iniciar no dia seguinte.
     *
     * @return successful operation (status code 200)
     *         or Mensagem genérica de erro (status code 200)
     */
    @Operation(
        operationId = "getEquipmentStatus",
        summary = "Consulta status de equipamentos para o próximo dia",
        description = "Retorna o status dos equipamentos planejados para iniciar no dia seguinte.",
        tags = { "routers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ApiEquipmentStatus.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Mensagem genérica de erro", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/routers/status",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ApiEquipmentStatus>> getEquipmentStatus(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"scheduledEndDate\" : \"2000-01-23T04:56:07.000+00:00\", \"actualEndDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastCloseDate\" : 1033, \"tpCode\" : 13653791, \"routerId\" : \"SR-SDR1A\", \"state\" : \"Pendente Permissão\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"scheduledStartDate\" : \"2000-01-23T04:56:07.000+00:00\", \"statusCode\" : 10 }, { \"scheduledEndDate\" : \"2000-01-23T04:56:07.000+00:00\", \"actualEndDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastCloseDate\" : 1033, \"tpCode\" : 13653791, \"routerId\" : \"SR-SDR1A\", \"state\" : \"Pendente Permissão\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"scheduledStartDate\" : \"2000-01-23T04:56:07.000+00:00\", \"statusCode\" : 10 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"detail\" : \"detail\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /routers/network-layers/ : Consulta código e status da camada de rede de um equipamento específico
     * Retorna o código e status da camada de rede para um equipamento identificado pelo routerId.
     *
     * @param tpCode Equipamento usado para o filtro (required)
     * @return successful operation (status code 200)
     *         or Mensagem genérica de erro (status code 200)
     */
    @Operation(
        operationId = "getNetworkLayers",
        summary = "Consulta código e status da camada de rede de um equipamento específico",
        description = "Retorna o código e status da camada de rede para um equipamento identificado pelo routerId.",
        tags = { "routers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ApiNetworkLayer.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Mensagem genérica de erro", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/routers/network-layers/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ApiNetworkLayer>> getNetworkLayers(
        @NotNull @Parameter(name = "tpCode", description = "Equipamento usado para o filtro", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "tpCode", required = true) List<Long> tpCode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"scheduledEndDate\" : \"2000-01-23T04:56:07.000+00:00\", \"tpCode\" : 13653791, \"state\" : \"Pendente Permissão\", \"scheduledStartDate\" : \"2000-01-23T04:56:07.000+00:00\", \"statusCode\" : 10 }, { \"scheduledEndDate\" : \"2000-01-23T04:56:07.000+00:00\", \"tpCode\" : 13653791, \"state\" : \"Pendente Permissão\", \"scheduledStartDate\" : \"2000-01-23T04:56:07.000+00:00\", \"statusCode\" : 10 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"detail\" : \"detail\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /routers/status/upcoming-days : Consulta tarefas de camadas de rede para os próximos 5 dias
     * Retorna informações de tarefas agendadas para os próximos 5 dias nas camadas de rede, filtrando por hostname e excluindo certos status
     *
     * @param routerIds Lista de routerIds para filtrar os equipamentos (formato CSV). (required)
     * @return successful operation (status code 200)
     *         or Mensagem genérica de erro (status code 200)
     */
    @Operation(
        operationId = "getNetworkLayersStatus",
        summary = "Consulta tarefas de camadas de rede para os próximos 5 dias",
        description = "Retorna informações de tarefas agendadas para os próximos 5 dias nas camadas de rede, filtrando por hostname e excluindo certos status",
        tags = { "routers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ApiNetworkLayerStatus.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Mensagem genérica de erro", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/routers/status/upcoming-days",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ApiNetworkLayerStatus>> getNetworkLayersStatus(
        @NotNull @Parameter(name = "routerIds", description = "Lista de routerIds para filtrar os equipamentos (formato CSV).", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "routerIds", required = true) List<String> routerIds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"scheduledEndDate\" : \"2000-01-23T04:56:07.000+00:00\", \"networkLayer\" : \"SR1\", \"tpCode\" : 13653791, \"routerId\" : \"SR-SDR1A\", \"state\" : \"Pendente Permissão\", \"impactType\" : \"Não Afeta Elemento nem Serviços\", \"scheduledStartDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"scheduledEndDate\" : \"2000-01-23T04:56:07.000+00:00\", \"networkLayer\" : \"SR1\", \"tpCode\" : 13653791, \"routerId\" : \"SR-SDR1A\", \"state\" : \"Pendente Permissão\", \"impactType\" : \"Não Afeta Elemento nem Serviços\", \"scheduledStartDate\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"detail\" : \"detail\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * PATCH /routers/network-layers/{id} : Updates partially a &#39;ApiNetworkLayer&#39; by Id
     *
     * @param tpCode Identifier of the Change Request (required)
     * @param apiNetworkLayer The Change Request to be updated (required)
     * @return Updated (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "patchApiNetworkLayer",
            summary = "Updates partially a 'ApiNetworkLayer' by Id",
            tags = { "routers" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNetworkLayer.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Method Not allowed", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Conflict", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "ApiKeyAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/routers/network-layers/{tpCode}",
            produces = { "application/json" },
            consumes = { "application/json" }
    )

    default ResponseEntity<ApiNetworkLayer> patchNetworkLayers(
            @Parameter(name = "tpCode", description = "Identifier of the ApiNetworkLayer", required = true, in = ParameterIn.PATH) @PathVariable("tpCode") String tpCode,
            @Parameter(name = "apiNetworkLayer", description = "The ApiNetworkLayer to be updated", required = true) @Valid @RequestBody ApiNetworkLayer apiNetworkLayer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reason\" : \"reason\", \"channel\" : \"channel\", \"resolution\" : { \"code\" : \"code\", \"task\" : [ { \"@baseType\" : \"@baseType\", \"@type\" : \"@type\", \"name\" : \"name\", \"description\" : \"description\", \"state\" : \"state\", \"@schemaLocation\" : \"@schemaLocation\" }, { \"@baseType\" : \"@baseType\", \"@type\" : \"@type\", \"name\" : \"name\", \"description\" : \"description\", \"state\" : \"state\", \"@schemaLocation\" : \"@schemaLocation\" } ], \"@baseType\" : \"@baseType\", \"@type\" : \"@type\", \"name\" : \"name\", \"description\" : \"description\", \"@schemaLocation\" : \"@schemaLocation\" }, \"plannedStartTime\" : \"2000-01-23T04:56:07.000+00:00\", \"workLog\" : { \"lastUpdateDateTime\" : \"lastUpdateDateTime\", \"@baseType\" : \"@baseType\", \"@type\" : \"@type\", \"record\" : [ { \"dateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"@baseType\" : \"@baseType\", \"@type\" : \"@type\", \"description\" : \"description\", \"@schemaLocation\" : \"@schemaLocation\", \"supportPerson\" : \"supportPerson\" }, { \"dateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"@baseType\" : \"@baseType\", \"@type\" : \"@type\", \"description\" : \"description\", \"@schemaLocation\" : \"@schemaLocation\", \"supportPerson\" : \"supportPerson\" } ], \"description\" : \"description\", \"@schemaLocation\" : \"@schemaLocation\", \"createDateTime\" : \"2000-01-23T04:56:07.000+00:00\" }, \"@baseType\" : \"@baseType\", \"realAffectationStart\" : \"2000-01-23T04:56:07.000+00:00\", \"riskMitigationPlan\" : \"riskMitigationPlan\", \"href\" : \"href\", \"id\" : \"id\", \"realAffectationEnd\" : \"2000-01-23T04:56:07.000+00:00\", \"budget\" : \"budget\", \"riskValue\" : \"riskValue\", \"impact\" : \"impact\", \"sla\" : [ null, null ], \"priority\" : \"priority\", \"relatedParty\" : [ null, null ], \"plannedAffectationEndTime\" : \"2000-01-23T04:56:07.000+00:00\", \"rollbackDate\" : \"2000-01-23T04:56:07.000+00:00\", \"originatingSystem\" : \"originatingSystem\", \"plannedEndTime\" : \"2000-01-23T04:56:07.000+00:00\", \"actualEndTime\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"status\", \"note\" : [ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"author\" : \"author\", \"text\" : \"text\" }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"author\" : \"author\", \"text\" : \"text\" } ], \"actualStartTime\" : \"2000-01-23T04:56:07.000+00:00\", \"targetEntity\" : [ null, null ], \"activity\" : \"activity\", \"relatedChangeRequest\" : [ { \"@referredType\" : \"@referredType\", \"correlation\" : \"correlation\", \"description\" : \"description\", \"href\" : \"href\", \"id\" : \"id\" }, { \"@referredType\" : \"@referredType\", \"correlation\" : \"correlation\", \"description\" : \"description\", \"href\" : \"href\", \"id\" : \"id\" } ], \"@type\" : \"@type\", \"description\" : \"description\", \"scheduledDate\" : \"2000-01-23T04:56:07.000+00:00\", \"characteristic\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"affectationType\" : \"affectationType\", \"attachment\" : [ { \"validFor\" : { \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\" }, \"@type\" : \"@type\", \"description\" : \"description\", \"mimeType\" : \"mimeType\", \"url\" : \"url\", \"path\" : \"path\", \"size\" : 0, \"@baseType\" : \"@baseType\", \"name\" : \"name\", \"sizeUnit\" : 6, \"href\" : \"href\", \"id\" : \"id\", \"@schemaLocation\" : \"@schemaLocation\" }, { \"validFor\" : { \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\" }, \"@type\" : \"@type\", \"description\" : \"description\", \"mimeType\" : \"mimeType\", \"url\" : \"url\", \"path\" : \"path\", \"size\" : 0, \"@baseType\" : \"@baseType\", \"name\" : \"name\", \"sizeUnit\" : 6, \"href\" : \"href\", \"id\" : \"id\", \"@schemaLocation\" : \"@schemaLocation\" } ], \"requestDate\" : \"2000-01-23T04:56:07.000+00:00\", \"currency\" : \"currency\", \"justification\" : \"justification\", \"@schemaLocation\" : \"@schemaLocation\", \"networkType\" : \"networkType\", \"planType\" : \"planType\", \"requestType\" : \"requestType\", \"externalId\" : \"externalId\", \"specification\" : { \"@baseType\" : \"@baseType\", \"validFor\" : { \"startDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"endDateTime\" : \"2000-01-23T04:56:07.000+00:00\" }, \"@type\" : \"@type\", \"name\" : \"name\", \"description\" : \"description\", \"href\" : \"href\", \"id\" : \"id\", \"@schemaLocation\" : \"@schemaLocation\" }, \"workType\" : \"workType\", \"plannedAffectationStartTime\" : \"2000-01-23T04:56:07.000+00:00\", \"completionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"risk\" : \"risk\", \"location\" : { \"@referredType\" : \"@referredType\", \"role\" : \"role\", \"@baseType\" : \"@baseType\", \"@type\" : \"@type\", \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\", \"@schemaLocation\" : \"@schemaLocation\" }, \"category\" : [ { \"@referredType\" : \"@referredType\", \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\" }, { \"@referredType\" : \"@referredType\", \"name\" : \"name\", \"href\" : \"href\", \"id\" : \"id\" } ], \"incident\" : [ { \"@baseType\" : \"@baseType\", \"@type\" : \"@type\", \"name\" : \"name\", \"description\" : \"description\", \"@schemaLocation\" : \"@schemaLocation\" }, { \"@baseType\" : \"@baseType\", \"@type\" : \"@type\", \"name\" : \"name\", \"description\" : \"description\", \"@schemaLocation\" : \"@schemaLocation\" } ], \"impactEntity\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }



    /**
     * DELETE /routers/network-layers/{id} : Deletes a &#39;ApiNetworkLayer&#39; by Id
     *
     * @param id Identifier of the ApiNetworkLayer (required)
     * @return Deleted (status code 204)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
            operationId = "deleteNetworkLayers",
            summary = "Deletes a 'ApiNetworkLayer' by Id",
            tags = { "routers" },
            responses = {
                    @ApiResponse(responseCode = "204", description = "Deleted"),
                    @ApiResponse(responseCode = "default", description = "Mensagem genérica de erro", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ApiErrorMessage.class)))
                    })
            },
            security = {
                    @SecurityRequirement(name = "ApiKeyAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/routers/network-layers/{id}",
            produces = { "application/json" }
    )

    default ResponseEntity<Void> deleteNetworkLayers(
            @Parameter(name = "id", description = "Identifier of the Change Request", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reason\" : 5, \"code\" : 1, \"@type\" : \"@type\", \"message\" : \"message\", \"referenceError\" : \"referenceError\", \"@schemaLocation\" : \"@schemaLocation\", \"status\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
